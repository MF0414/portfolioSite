'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseLink = function (_Component) {
    _inherits(BaseLink, _Component);

    function BaseLink(props, context) {
        _classCallCheck(this, BaseLink);

        var _this = _possibleConstructorReturn(this, (BaseLink.__proto__ || Object.getPrototypeOf(BaseLink)).call(this, props, context));

        _this.router = context.router;

        if (!_this.router.hasPlugin('BROWSER_PLUGIN')) {
            console.error('[react-router5][BaseLink] missing browser plugin, href might be built incorrectly');
        }

        _this.isActive = _this.isActive.bind(_this);
        _this.clickHandler = _this.clickHandler.bind(_this);
        _this.callback = _this.callback.bind(_this);

        _this.state = { active: _this.isActive() };
        return _this;
    }

    _createClass(BaseLink, [{
        key: 'buildUrl',
        value: function buildUrl(routeName, routeParams) {
            if (this.router.buildUrl) {
                return this.router.buildUrl(routeName, routeParams);
            }

            return this.router.buildPath(routeName, routeParams);
        }
    }, {
        key: 'isActive',
        value: function isActive() {
            return this.router.isActive(this.props.routeName, this.props.routeParams, this.props.activeStrict, this.props.ignoreQueryParams);
        }
    }, {
        key: 'callback',
        value: function callback(err, state) {
            if (!err && this.props.successCallback) {
                this.props.successCallback(state);
            }

            if (err && this.props.errorCallback) {
                this.props.errorCallback(err);
            }
        }
    }, {
        key: 'clickHandler',
        value: function clickHandler(evt) {
            var _props = this.props,
                onClick = _props.onClick,
                target = _props.target;


            if (onClick) {
                onClick(evt);

                if (evt.defaultPrevented) {
                    return;
                }
            }

            var comboKey = evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey;

            if (evt.button === 0 && !comboKey && target !== '_blank') {
                evt.preventDefault();
                this.router.navigate(this.props.routeName, this.props.routeParams, this.props.routeOptions, this.callback);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            /* eslint-disable */
            var _props2 = this.props,
                routeName = _props2.routeName,
                routeParams = _props2.routeParams,
                routeOptions = _props2.routeOptions,
                className = _props2.className,
                activeClassName = _props2.activeClassName,
                activeStrict = _props2.activeStrict,
                ignoreQueryParams = _props2.ignoreQueryParams,
                route = _props2.route,
                previousRoute = _props2.previousRoute,
                router = _props2.router,
                children = _props2.children,
                onClick = _props2.onClick,
                successCallback = _props2.successCallback,
                errorCallback = _props2.errorCallback,
                linkProps = _objectWithoutProperties(_props2, ['routeName', 'routeParams', 'routeOptions', 'className', 'activeClassName', 'activeStrict', 'ignoreQueryParams', 'route', 'previousRoute', 'router', 'children', 'onClick', 'successCallback', 'errorCallback']);
            /* eslint-enable */

            var active = this.isActive();
            var href = this.buildUrl(routeName, routeParams);
            var linkclassName = (active ? [activeClassName] : []).concat(className ? className.split(' ') : []).join(' ');

            return _react2.default.createElement('a', _extends({}, linkProps, {
                href: href,
                className: linkclassName,
                onClick: this.clickHandler
            }), children);
        }
    }]);

    return BaseLink;
}(_react.Component);

BaseLink.contextTypes = {
    router: _propTypes2.default.object.isRequired
};

BaseLink.propTypes = {
    routeName: _propTypes2.default.string.isRequired,
    routeParams: _propTypes2.default.object,
    routeOptions: _propTypes2.default.object,
    activeClassName: _propTypes2.default.string,
    activeStrict: _propTypes2.default.bool,
    ignoreQueryParams: _propTypes2.default.bool,
    onClick: _propTypes2.default.func,
    onMouseOver: _propTypes2.default.func,
    successCallback: _propTypes2.default.func,
    errorCallback: _propTypes2.default.func
};

BaseLink.defaultProps = {
    activeClassName: 'active',
    activeStrict: false,
    ignoreQueryParams: true,
    routeParams: {},
    routeOptions: {}
};

exports.default = BaseLink;