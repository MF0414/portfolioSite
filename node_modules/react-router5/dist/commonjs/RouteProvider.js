'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RouteNode = exports.Route = exports.RouteProvider = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _router5TransitionPath = require('router5-transition-path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var emptyCreateContext = function emptyCreateContext() {
    return {
        Provider: function Provider(_ref) {
            var children = _ref.children;
            return children;
        },
        Consumer: function Consumer() {
            return null;
        }
    };
};

var createContext = _react2.default.createContext || emptyCreateContext;

var _createContext = createContext({}),
    Provider = _createContext.Provider,
    Route = _createContext.Consumer;

var RouteProvider = function (_React$PureComponent) {
    _inherits(RouteProvider, _React$PureComponent);

    function RouteProvider(props) {
        _classCallCheck(this, RouteProvider);

        var _this = _possibleConstructorReturn(this, (RouteProvider.__proto__ || Object.getPrototypeOf(RouteProvider)).call(this, props));

        var router = props.router;

        _this.mounted = false;
        _this.router = router;
        _this.routeState = {
            route: router.getState(),
            previousRoute: null
        };

        if (typeof window !== 'undefined') {
            var listener = function listener(_ref2) {
                var route = _ref2.route,
                    previousRoute = _ref2.previousRoute;

                _this.routeState = {
                    route: route,
                    previousRoute: previousRoute
                };
                if (_this.mounted) {
                    _this.forceUpdate();
                }
            };
            _this.unsubscribe = _this.router.subscribe(listener);
        }
        return _this;
    }

    _createClass(RouteProvider, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.unsubscribe) {
                this.unsubscribe();
            }
        }
    }, {
        key: 'getChildContext',
        value: function getChildContext() {
            return { router: this.props.router };
        }
    }, {
        key: 'render',
        value: function render() {
            var value = _extends({
                router: this.props.router
            }, this.routeState);
            return _react2.default.createElement(
                Provider,
                { value: value },
                this.props.children
            );
        }
    }]);

    return RouteProvider;
}(_react2.default.PureComponent);

RouteProvider.childContextTypes = {
    router: _propTypes2.default.object.isRequired
};

RouteProvider.propTypes = {
    router: _propTypes2.default.object.isRequired,
    children: _propTypes2.default.node.isRequired
};

var RouteNode = function (_React$Component) {
    _inherits(RouteNode, _React$Component);

    function RouteNode(props, context) {
        _classCallCheck(this, RouteNode);

        var _this2 = _possibleConstructorReturn(this, (RouteNode.__proto__ || Object.getPrototypeOf(RouteNode)).call(this, props, context));

        _this2.renderOnRouteNodeChange = _this2.renderOnRouteNodeChange.bind(_this2);
        return _this2;
    }

    _createClass(RouteNode, [{
        key: 'renderOnRouteNodeChange',
        value: function renderOnRouteNodeChange(routeContext) {
            var shouldUpdate = (0, _router5TransitionPath.shouldUpdateNode)(this.props.nodeName)(routeContext.route, routeContext.previousRoute);

            if (!this.memoizedResult || shouldUpdate) {
                this.memoizedResult = this.props.children(routeContext);
            }

            return this.memoizedResult;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                Route,
                null,
                this.renderOnRouteNodeChange
            );
        }
    }]);

    return RouteNode;
}(_react2.default.Component);

RouteNode.propTypes = {
    nodeName: _propTypes2.default.string.isRequired,
    children: _propTypes2.default.func.isRequired
};

exports.RouteProvider = RouteProvider;
exports.Route = Route;
exports.RouteNode = RouteNode;