{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport $$observable from 'symbol-observable';\n\nfunction observerPlugin(router) {\n  var listeners = [];\n\n  function unsubscribe(listener) {\n    if (listener) {\n      listeners = listeners.filter(function (l) {\n        return l !== listener;\n      });\n    }\n  }\n\n  function _subscribe(listener) {\n    var isObject = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';\n    var finalListener = isObject ? listener.next.bind(listener) : listener;\n    listeners = listeners.concat(finalListener);\n\n    var unsubscribeHandler = function unsubscribeHandler() {\n      return unsubscribe(finalListener);\n    };\n\n    return isObject ? {\n      unsubscribe: unsubscribeHandler\n    } : unsubscribeHandler;\n  }\n\n  function observable() {\n    return _defineProperty({\n      subscribe: function subscribe(observer) {\n        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        return _subscribe(observer);\n      }\n    }, $$observable, function () {\n      return this;\n    });\n  }\n\n  router.subscribe = _subscribe;\n  router[$$observable] = observable;\n  return {\n    onTransitionSuccess: function onTransitionSuccess(toState, fromState) {\n      listeners.forEach(function (listener) {\n        return listener({\n          route: toState,\n          previousRoute: fromState\n        });\n      });\n    }\n  };\n}\n\nobserverPlugin.pluginName = 'OBSERVABLE_PLUGIN';\nexport default function withObservablePlugin(router) {\n  router.usePlugin(observerPlugin);\n}","map":null,"metadata":{},"sourceType":"module"}