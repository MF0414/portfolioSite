{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nimport constants, { errorCodes } from '../constants';\n\nvar noop = function noop() {};\n\nexport default function withRouterLifecycle(router) {\n  var started = false;\n  router.isStarted = isStarted;\n  router.start = start;\n  router.stop = stop;\n  /**\n   * Check if the router is started\n   * @return {Boolean} Whether the router is started or not\n   */\n\n  function isStarted() {\n    return started;\n  }\n  /**\n   * Start the router\n   * @param  {String|Object} startPathOrState The start path or state. This is optional when using the browser plugin.\n   * @param  {Function}      done             A done node style callback (err, state)\n   * @return {Object}                         The router instance\n   */\n\n\n  function start() {\n    var _ref;\n\n    var options = router.getOptions();\n    var lastArg = (_ref = arguments.length - 1, arguments.length <= _ref ? undefined : arguments[_ref]);\n    var done = typeof lastArg === 'function' ? lastArg : noop;\n    var startPathOrState = typeof (arguments.length <= 0 ? undefined : arguments[0]) !== 'function' ? arguments.length <= 0 ? undefined : arguments[0] : undefined;\n\n    if (started) {\n      done({\n        code: errorCodes.ROUTER_ALREADY_STARTED\n      });\n      return router;\n    }\n\n    var startPath = void 0,\n        startState = void 0;\n    started = true;\n    router.invokeEventListeners(constants.ROUTER_START); // callback\n\n    var cb = function cb(err, state) {\n      var invokeErrCb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!err) router.invokeEventListeners(constants.TRANSITION_SUCCESS, state, null, {\n        replace: true\n      });\n      if (err && invokeErrCb) router.invokeEventListeners(constants.TRANSITION_ERROR, state, null, err);\n      done(err, state);\n    };\n\n    if (startPathOrState === undefined && !options.defaultRoute) {\n      return cb({\n        code: errorCodes.NO_START_PATH_OR_STATE\n      });\n    }\n\n    if (typeof startPathOrState === 'string') {\n      startPath = startPathOrState;\n    } else if ((typeof startPathOrState === 'undefined' ? 'undefined' : _typeof(startPathOrState)) === 'object') {\n      startState = startPathOrState;\n    }\n\n    if (!startState) {\n      // If no supplied start state, get start state\n      startState = startPath === undefined ? null : router.matchPath(startPath); // Navigate to default function\n\n      var navigateToDefault = function navigateToDefault() {\n        return router.navigateToDefault({\n          replace: true\n        }, done);\n      };\n\n      var redirect = function redirect(route) {\n        return router.navigate(route.name, route.params, {\n          replace: true,\n          reload: true,\n          redirected: true\n        }, done);\n      };\n\n      var transitionToState = function transitionToState(state) {\n        router.transitionToState(state, router.getState(), {}, function (err, state) {\n          if (!err) cb(null, state);else if (err.redirect) redirect(err.redirect);else if (options.defaultRoute) navigateToDefault();else cb(err, null, false);\n        });\n      }; // If matched start path\n\n\n      if (startState) {\n        transitionToState(startState);\n      } else if (options.defaultRoute) {\n        // If default, navigate to default\n        navigateToDefault();\n      } else if (options.allowNotFound) {\n        transitionToState(router.makeNotFoundState(startPath, {\n          replace: true\n        }));\n      } else {\n        // No start match, no default => do nothing\n        cb({\n          code: errorCodes.ROUTE_NOT_FOUND,\n          path: startPath\n        }, null);\n      }\n    } else {\n      // Initialise router with provided start state\n      router.setState(startState);\n      cb(null, startState);\n    }\n\n    return router;\n  }\n  /**\n   * Stop the router\n   * @return {Object} The router instance\n   */\n\n\n  function stop() {\n    if (started) {\n      router.setState(null);\n      started = false;\n      router.invokeEventListeners(constants.ROUTER_STOP);\n    }\n\n    return router;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}