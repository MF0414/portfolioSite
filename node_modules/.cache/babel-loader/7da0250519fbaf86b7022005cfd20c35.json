{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { Component, createElement } from 'react';\nimport { getDisplayName } from './utils';\nimport PropTypes from 'prop-types';\nimport { shouldUpdateNode } from 'router5-transition-path';\n\nfunction routeNode(nodeName) {\n  return function routeNodeWrapper(RouteSegment) {\n    var RouteNode = function (_Component) {\n      _inherits(RouteNode, _Component);\n\n      function RouteNode(props, context) {\n        _classCallCheck(this, RouteNode);\n\n        var _this = _possibleConstructorReturn(this, (RouteNode.__proto__ || Object.getPrototypeOf(RouteNode)).call(this, props, context));\n\n        _this.router = context.router;\n        _this.routeState = {\n          previousRoute: null,\n          route: _this.router.getState()\n        };\n        _this.mounted = false;\n\n        if (typeof window !== 'undefined') {\n          var listener = function listener(_ref) {\n            var route = _ref.route,\n                previousRoute = _ref.previousRoute;\n\n            if (shouldUpdateNode(nodeName)(route, previousRoute)) {\n              _this.routeState = {\n                previousRoute: previousRoute,\n                route: route\n              };\n\n              if (_this.mounted) {\n                _this.forceUpdate();\n              }\n            }\n          };\n\n          _this.unsubscribe = _this.router.subscribe(listener);\n        }\n\n        return _this;\n      }\n\n      _createClass(RouteNode, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n          this.mounted = true;\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          if (this.unsubscribe) {\n            this.unsubscribe();\n          }\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var props = this.props,\n              router = this.router;\n          var _routeState = this.routeState,\n              previousRoute = _routeState.previousRoute,\n              route = _routeState.route;\n          var component = createElement(RouteSegment, _extends({}, props, {\n            router: router,\n            previousRoute: previousRoute,\n            route: route\n          }));\n          return component;\n        }\n      }]);\n\n      return RouteNode;\n    }(Component);\n\n    RouteNode.contextTypes = {\n      router: PropTypes.object.isRequired\n    };\n    RouteNode.displayName = 'RouteNode[' + getDisplayName(RouteSegment) + ']';\n    return RouteNode;\n  };\n}\n\nexport default routeNode;","map":null,"metadata":{},"sourceType":"module"}