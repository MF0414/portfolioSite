{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { shouldUpdateNode } from 'router5-transition-path';\n\nvar emptyCreateContext = function emptyCreateContext() {\n  return {\n    Provider: function Provider(_ref) {\n      var children = _ref.children;\n      return children;\n    },\n    Consumer: function Consumer() {\n      return null;\n    }\n  };\n};\n\nvar createContext = React.createContext || emptyCreateContext;\n\nvar _createContext = createContext({}),\n    Provider = _createContext.Provider,\n    Route = _createContext.Consumer;\n\nvar RouteProvider = function (_React$PureComponent) {\n  _inherits(RouteProvider, _React$PureComponent);\n\n  function RouteProvider(props) {\n    _classCallCheck(this, RouteProvider);\n\n    var _this = _possibleConstructorReturn(this, (RouteProvider.__proto__ || Object.getPrototypeOf(RouteProvider)).call(this, props));\n\n    var router = props.router;\n    _this.mounted = false;\n    _this.router = router;\n    _this.routeState = {\n      route: router.getState(),\n      previousRoute: null\n    };\n\n    if (typeof window !== 'undefined') {\n      var listener = function listener(_ref2) {\n        var route = _ref2.route,\n            previousRoute = _ref2.previousRoute;\n        _this.routeState = {\n          route: route,\n          previousRoute: previousRoute\n        };\n\n        if (_this.mounted) {\n          _this.forceUpdate();\n        }\n      };\n\n      _this.unsubscribe = _this.router.subscribe(listener);\n    }\n\n    return _this;\n  }\n\n  _createClass(RouteProvider, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.mounted = true;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.unsubscribe) {\n        this.unsubscribe();\n      }\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        router: this.props.router\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var value = _extends({\n        router: this.props.router\n      }, this.routeState);\n\n      return React.createElement(Provider, {\n        value: value\n      }, this.props.children);\n    }\n  }]);\n\n  return RouteProvider;\n}(React.PureComponent);\n\nRouteProvider.childContextTypes = {\n  router: PropTypes.object.isRequired\n};\nRouteProvider.propTypes = {\n  router: PropTypes.object.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nvar RouteNode = function (_React$Component) {\n  _inherits(RouteNode, _React$Component);\n\n  function RouteNode(props, context) {\n    _classCallCheck(this, RouteNode);\n\n    var _this2 = _possibleConstructorReturn(this, (RouteNode.__proto__ || Object.getPrototypeOf(RouteNode)).call(this, props, context));\n\n    _this2.renderOnRouteNodeChange = _this2.renderOnRouteNodeChange.bind(_this2);\n    return _this2;\n  }\n\n  _createClass(RouteNode, [{\n    key: 'renderOnRouteNodeChange',\n    value: function renderOnRouteNodeChange(routeContext) {\n      var shouldUpdate = shouldUpdateNode(this.props.nodeName)(routeContext.route, routeContext.previousRoute);\n\n      if (!this.memoizedResult || shouldUpdate) {\n        this.memoizedResult = this.props.children(routeContext);\n      }\n\n      return this.memoizedResult;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement(Route, null, this.renderOnRouteNodeChange);\n    }\n  }]);\n\n  return RouteNode;\n}(React.Component);\n\nRouteNode.propTypes = {\n  nodeName: PropTypes.string.isRequired,\n  children: PropTypes.func.isRequired\n};\nexport { RouteProvider, Route, RouteNode };","map":null,"metadata":{},"sourceType":"module"}