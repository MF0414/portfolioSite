{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar BaseLink = function (_Component) {\n  _inherits(BaseLink, _Component);\n\n  function BaseLink(props, context) {\n    _classCallCheck(this, BaseLink);\n\n    var _this = _possibleConstructorReturn(this, (BaseLink.__proto__ || Object.getPrototypeOf(BaseLink)).call(this, props, context));\n\n    _this.router = context.router;\n\n    if (!_this.router.hasPlugin('BROWSER_PLUGIN')) {\n      console.error('[react-router5][BaseLink] missing browser plugin, href might be built incorrectly');\n    }\n\n    _this.isActive = _this.isActive.bind(_this);\n    _this.clickHandler = _this.clickHandler.bind(_this);\n    _this.callback = _this.callback.bind(_this);\n    _this.state = {\n      active: _this.isActive()\n    };\n    return _this;\n  }\n\n  _createClass(BaseLink, [{\n    key: 'buildUrl',\n    value: function buildUrl(routeName, routeParams) {\n      if (this.router.buildUrl) {\n        return this.router.buildUrl(routeName, routeParams);\n      }\n\n      return this.router.buildPath(routeName, routeParams);\n    }\n  }, {\n    key: 'isActive',\n    value: function isActive() {\n      return this.router.isActive(this.props.routeName, this.props.routeParams, this.props.activeStrict, this.props.ignoreQueryParams);\n    }\n  }, {\n    key: 'callback',\n    value: function callback(err, state) {\n      if (!err && this.props.successCallback) {\n        this.props.successCallback(state);\n      }\n\n      if (err && this.props.errorCallback) {\n        this.props.errorCallback(err);\n      }\n    }\n  }, {\n    key: 'clickHandler',\n    value: function clickHandler(evt) {\n      var _props = this.props,\n          onClick = _props.onClick,\n          target = _props.target;\n\n      if (onClick) {\n        onClick(evt);\n\n        if (evt.defaultPrevented) {\n          return;\n        }\n      }\n\n      var comboKey = evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey;\n\n      if (evt.button === 0 && !comboKey && target !== '_blank') {\n        evt.preventDefault();\n        this.router.navigate(this.props.routeName, this.props.routeParams, this.props.routeOptions, this.callback);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      /* eslint-disable */\n      var _props2 = this.props,\n          routeName = _props2.routeName,\n          routeParams = _props2.routeParams,\n          routeOptions = _props2.routeOptions,\n          className = _props2.className,\n          activeClassName = _props2.activeClassName,\n          activeStrict = _props2.activeStrict,\n          ignoreQueryParams = _props2.ignoreQueryParams,\n          route = _props2.route,\n          previousRoute = _props2.previousRoute,\n          router = _props2.router,\n          children = _props2.children,\n          onClick = _props2.onClick,\n          successCallback = _props2.successCallback,\n          errorCallback = _props2.errorCallback,\n          linkProps = _objectWithoutProperties(_props2, ['routeName', 'routeParams', 'routeOptions', 'className', 'activeClassName', 'activeStrict', 'ignoreQueryParams', 'route', 'previousRoute', 'router', 'children', 'onClick', 'successCallback', 'errorCallback']);\n      /* eslint-enable */\n\n\n      var active = this.isActive();\n      var href = this.buildUrl(routeName, routeParams);\n      var linkclassName = (active ? [activeClassName] : []).concat(className ? className.split(' ') : []).join(' ');\n      return React.createElement('a', _extends({}, linkProps, {\n        href: href,\n        className: linkclassName,\n        onClick: this.clickHandler\n      }), children);\n    }\n  }]);\n\n  return BaseLink;\n}(Component);\n\nBaseLink.contextTypes = {\n  router: PropTypes.object.isRequired\n};\nBaseLink.propTypes = {\n  routeName: PropTypes.string.isRequired,\n  routeParams: PropTypes.object,\n  routeOptions: PropTypes.object,\n  activeClassName: PropTypes.string,\n  activeStrict: PropTypes.bool,\n  ignoreQueryParams: PropTypes.bool,\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  successCallback: PropTypes.func,\n  errorCallback: PropTypes.func\n};\nBaseLink.defaultProps = {\n  activeClassName: 'active',\n  activeStrict: false,\n  ignoreQueryParams: true,\n  routeParams: {},\n  routeOptions: {}\n};\nexport default BaseLink;","map":null,"metadata":{},"sourceType":"module"}