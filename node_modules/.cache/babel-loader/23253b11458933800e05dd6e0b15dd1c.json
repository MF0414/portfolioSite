{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar pluginMethods = ['onStart', 'onStop', 'onTransitionSuccess', 'onTransitionStart', 'onTransitionError', 'onTransitionCancel'];\nexport default function withPlugins(router) {\n  var plugins = [];\n  var removePluginListeners = [];\n  router.usePlugin = usePlugin;\n  router.hasPlugin = hasPlugin;\n  router.getPlugins = getPlugins;\n\n  function getPlugins() {\n    return plugins;\n  }\n  /**\n   * Use plugins\n   * @param  {...Function} plugins An argument list of plugins\n   * @return {Object}              The router instance\n   */\n\n\n  function usePlugin() {\n    for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {\n      plugins[_key] = arguments[_key];\n    }\n\n    plugins.forEach(addPlugin);\n    return router;\n  }\n\n  function addPlugin(plugin) {\n    if (!hasPlugin(plugin.pluginName)) {\n      plugins.push(plugin);\n      startPlugin(plugin);\n    }\n  }\n  /**\n   * Check if a plugin has already been registered.\n   * @param  {String}  pluginName The plugin name\n   * @return {Boolean}            Whether the plugin has been registered\n   */\n\n\n  function hasPlugin(pluginName) {\n    return plugins.filter(function (p) {\n      return p.pluginName === pluginName || p.name === pluginName;\n    }).length > 0;\n  }\n\n  function startPlugin(plugin) {\n    var appliedPlugin = router.executeFactory(plugin);\n    var removeEventListeners = pluginMethods.map(function (methodName) {\n      if (appliedPlugin[methodName]) {\n        return router.addEventListener(methodName.toLowerCase().replace(/^on/, '$$').replace(/transition/, '$$'), appliedPlugin[methodName]);\n      }\n    }).filter(Boolean);\n    removePluginListeners.push.apply(removePluginListeners, _toConsumableArray(removeEventListeners));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}