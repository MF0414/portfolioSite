{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _constants = require('../../constants');\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _browser = require('./browser');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultOptions = {\n  forceDeactivate: true,\n  useHash: false,\n  hashPrefix: '',\n  base: false,\n  mergeState: false,\n  preserveHash: true\n};\nvar source = 'popstate';\n\nfunction browserPluginFactory() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var browser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _browser2.default;\n\n  var options = _extends({}, defaultOptions, opts);\n\n  var transitionOptions = {\n    forceDeactivate: options.forceDeactivate,\n    source: source\n  };\n  var removePopStateListener = void 0;\n\n  function browserPlugin(router) {\n    var routerOptions = router.getOptions();\n    var routerStart = router.start;\n    (0, _utils2.default)(router, options);\n\n    router.start = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length === 0 || typeof args[0] === 'function') {\n        routerStart.apply(undefined, [browser.getLocation(options)].concat(args));\n      } else {\n        routerStart.apply(undefined, args);\n      }\n\n      return router;\n    };\n\n    router.replaceHistoryState = function (name) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var route = router.buildState(name, params);\n      var state = router.makeState(route.name, route.params, router.buildPath(route.name, route.params), {\n        params: route.meta\n      });\n      var url = router.buildUrl(name, params);\n      router.lastKnownState = state;\n      browser.replaceState(state, title, url);\n    };\n\n    function updateBrowserState(state, url, replace) {\n      var trimmedState = state ? {\n        meta: state.meta,\n        name: state.name,\n        params: state.params,\n        path: state.path\n      } : state;\n      var finalState = options.mergeState === true ? _extends({}, browser.getState(), trimmedState) : trimmedState;\n      if (replace) browser.replaceState(finalState, '', url);else browser.pushState(finalState, '', url);\n    }\n\n    function onPopState() {\n      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var routerState = router.getState(); // Do nothing if no state or if last know state is poped state (it should never happen)\n\n      var newState = !evt.state || !evt.state.name;\n      var state = newState ? router.matchPath(browser.getLocation(options), source) : router.makeState(evt.state.name, evt.state.params, evt.state.path, _extends({}, evt.state.meta, {\n        source: source\n      }), evt.state.meta.id);\n      var defaultRoute = routerOptions.defaultRoute,\n          defaultParams = routerOptions.defaultParams;\n\n      if (!state) {\n        // If current state is already the default route, we will have a double entry\n        // Navigating back and forth will emit SAME_STATES error\n        defaultRoute && router.navigateToDefault(_extends({}, transitionOptions, {\n          reload: true,\n          replace: true\n        }));\n        return;\n      }\n\n      if (routerState && router.areStatesEqual(state, routerState, false)) {\n        return;\n      }\n\n      router.transitionToState(state, routerState, transitionOptions, function (err, toState) {\n        if (err) {\n          if (err.redirect) {\n            var _err$redirect = err.redirect,\n                name = _err$redirect.name,\n                params = _err$redirect.params;\n            router.navigate(name, params, _extends({}, transitionOptions, {\n              replace: true,\n              force: true,\n              redirected: true\n            }));\n          } else if (err.code === _constants.errorCodes.CANNOT_DEACTIVATE) {\n            var url = router.buildUrl(routerState.name, routerState.params);\n\n            if (!newState) {\n              // Keep history state unchanged but use current URL\n              updateBrowserState(state, url, true);\n            } // else do nothing or history will be messed up\n            // TODO: history.back()?\n\n          } else {\n            // Force navigation to default state\n            defaultRoute && router.navigate(defaultRoute, defaultParams, _extends({}, transitionOptions, {\n              reload: true,\n              replace: true\n            }));\n          }\n        } else {\n          router.invokeEventListeners(_constants2.default.TRANSITION_SUCCESS, toState, routerState, {\n            replace: true\n          });\n        }\n      });\n    }\n\n    function onStart() {\n      if (options.useHash && !options.base) {\n        // Guess base\n        options.base = browser.getBase();\n      }\n\n      removePopStateListener = browser.addPopstateListener(onPopState, options);\n    }\n\n    function onStop() {\n      if (removePopStateListener) {\n        removePopStateListener();\n      }\n    }\n\n    function onTransitionSuccess(toState, fromState, opts) {\n      var historyState = browser.getState();\n      var hasState = historyState && historyState.meta && historyState.name && historyState.params;\n      var statesAreEqual = fromState && router.areStatesEqual(fromState, toState, false);\n      var replace = opts.replace || !hasState || statesAreEqual;\n      var url = router.buildUrl(toState.name, toState.params);\n\n      if (fromState === null && options.useHash === false && options.preserveHash === true) {\n        url += browser.getHash();\n      }\n\n      updateBrowserState(toState, url, replace);\n    }\n\n    return {\n      onStart: onStart,\n      onStop: onStop,\n      onTransitionSuccess: onTransitionSuccess,\n      onPopState: onPopState\n    };\n  }\n\n  browserPlugin.pluginName = 'BROWSER_PLUGIN';\n  return browserPlugin;\n}\n\nexports.default = browserPluginFactory;","map":null,"metadata":{},"sourceType":"script"}