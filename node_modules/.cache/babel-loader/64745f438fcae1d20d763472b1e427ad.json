{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nexport default function resolve(functions, _ref, callback) {\n  var isCancelled = _ref.isCancelled,\n      toState = _ref.toState,\n      fromState = _ref.fromState,\n      errorKey = _ref.errorKey;\n  var remainingFunctions = Array.isArray(functions) ? functions : Object.keys(functions);\n\n  var isState = function isState(obj) {\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj.name !== undefined && obj.params !== undefined && obj.path !== undefined;\n  };\n\n  var hasStateChanged = function hasStateChanged(toState, fromState) {\n    return fromState.name !== toState.name || fromState.params !== toState.params || fromState.path !== toState.path;\n  };\n\n  var mergeStates = function mergeStates(toState, fromState) {\n    return _extends({}, fromState, toState, {\n      meta: _extends({}, fromState.meta, toState.meta)\n    });\n  };\n\n  var processFn = function processFn(stepFn, errBase, state, _done) {\n    var done = function done(err, newState) {\n      if (err) {\n        _done(err);\n      } else if (newState && newState !== state && isState(newState)) {\n        if (hasStateChanged(newState, state)) {\n          console.error('[router5][transition] Warning: state values (name, params, path) were changed during transition process.');\n        }\n\n        _done(null, mergeStates(newState, state));\n      } else {\n        _done(null, state);\n      }\n    };\n\n    var res = stepFn.call(null, state, fromState, done);\n\n    if (isCancelled()) {\n      done(null);\n    } else if (typeof res === 'boolean') {\n      done(res ? null : errBase);\n    } else if (isState(res)) {\n      done(null, res);\n    } else if (res && typeof res.then === 'function') {\n      res.then(function (resVal) {\n        if (resVal instanceof Error) done({\n          error: resVal\n        }, null);else done(null, resVal);\n      }, function (err) {\n        if (err instanceof Error) {\n          console.error(err.stack || err);\n          done(_extends({}, errBase, {\n            promiseError: err\n          }), null);\n        } else {\n          done((typeof err === 'undefined' ? 'undefined' : _typeof(err)) === 'object' ? _extends({}, errBase, err) : errBase, null);\n        }\n      });\n    } // else: wait for done to be called\n\n  };\n\n  var next = function next(err, state) {\n    if (isCancelled()) {\n      callback();\n    } else if (err) {\n      callback(err);\n    } else {\n      if (!remainingFunctions.length) {\n        callback(null, state);\n      } else {\n        var isMapped = typeof remainingFunctions[0] === 'string';\n        var errBase = errorKey && isMapped ? _defineProperty({}, errorKey, remainingFunctions[0]) : {};\n        var stepFn = isMapped ? functions[remainingFunctions[0]] : remainingFunctions[0];\n        remainingFunctions = remainingFunctions.slice(1);\n        processFn(stepFn, errBase, state, next);\n      }\n    }\n  };\n\n  next(null, toState);\n}","map":null,"metadata":{},"sourceType":"module"}