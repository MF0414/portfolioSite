{"ast":null,"code":"var dotOrEnd = '(\\\\..+$|$)';\nvar dotOrStart = '(^.+\\\\.|^)';\n\nfunction getName(route) {\n  return typeof route === 'string' ? route : route.name || '';\n}\n\nfunction test(route, regex) {\n  return regex.test(getName(route));\n}\n\nfunction normaliseSegment(name) {\n  return name.replace('.', '\\\\.');\n}\n\nfunction testRouteWithSegment(before, after) {\n  return function () {\n    var route = arguments[0];\n\n    function applySegment(segment) {\n      return test(route, new RegExp(before + normaliseSegment(segment) + after));\n    }\n\n    if (arguments.length === 2) {\n      return applySegment(arguments[1]);\n    }\n\n    return applySegment;\n  };\n}\n\nexport function redirect() {\n  var fromRouteName = arguments[0];\n\n  var redirectTo = function redirectTo(routeName, routeParams) {\n    return function () {\n      return function (toState, fromState, done) {\n        if (toState.name === fromRouteName) {\n          var finalRouteParams = typeof routeParams === 'function' ? routeParams(fromState.params) : routeParams;\n          var redirectState = finalRouteParams === undefined ? {\n            name: routeName\n          } : {\n            name: routeName,\n            params: finalRouteParams\n          };\n          done({\n            redirect: redirectState\n          });\n        } else {\n          done(null);\n        }\n      };\n    };\n  };\n\n  if (arguments.length > 1) {\n    return redirectTo(arguments[1], arguments[2]);\n  } else if (arguments.length === 1) {\n    return redirectTo;\n  }\n\n  throw new Error('[router5][helpers][redirect] no arguments supplied.');\n}\nexport var startsWithSegment = testRouteWithSegment('^', dotOrEnd);\nexport var endsWithSegment = testRouteWithSegment(dotOrStart, '$');\nexport var includesSegment = testRouteWithSegment(dotOrStart, dotOrEnd);","map":null,"metadata":{},"sourceType":"module"}