{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nexport default function withCloning(router, createRouter) {\n  router.clone = clone;\n  /**\n   * Clone the current router configuration. The new returned router will be non-started,\n   * with a null state\n   * @param  {[type]} deps [description]\n   * @return {[type]}      [description]\n   */\n\n  function clone() {\n    var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var clonedDependencies = _extends({}, router.getDependencies(), deps);\n\n    var clonedRouter = createRouter(router.rootNode, router.getOptions(), clonedDependencies);\n    clonedRouter.useMiddleware.apply(clonedRouter, _toConsumableArray(router.getMiddlewareFactories()));\n    clonedRouter.usePlugin.apply(clonedRouter, _toConsumableArray(router.getPlugins()));\n    clonedRouter.config = router.config;\n\n    var _router$getLifecycleF = router.getLifecycleFactories(),\n        _router$getLifecycleF2 = _slicedToArray(_router$getLifecycleF, 2),\n        canDeactivateFactories = _router$getLifecycleF2[0],\n        canActivateFactories = _router$getLifecycleF2[1];\n\n    Object.keys(canDeactivateFactories).forEach(function (name) {\n      return clonedRouter.canDeactivate(name, canDeactivateFactories[name]);\n    });\n    Object.keys(canActivateFactories).forEach(function (name) {\n      return clonedRouter.canActivate(name, canActivateFactories[name]);\n    });\n    return clonedRouter;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}