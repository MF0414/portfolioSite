/* istanbul ignore next */
/*eslint no-console: 0*/
var noop = function noop() {};

function loggerPlugin() {
    var startGroup = void 0,
        endGroup = void 0;

    if (console.groupCollapsed) {
        startGroup = function startGroup(label) {
            return console.groupCollapsed(label);
        };
        endGroup = function endGroup() {
            return console.groupEnd();
        };
    } else if (console.group) {
        startGroup = function startGroup(label) {
            return console.group(label);
        };
        endGroup = function endGroup() {
            return console.groupEnd();
        };
    } else {
        startGroup = noop;
        endGroup = noop;
    }

    console.info('Router started');

    return {
        onStop: function onStop() {
            console.info('Router stopped');
        },
        onTransitionStart: function onTransitionStart(toState, fromState) {
            endGroup();
            startGroup('Router transition');
            console.log('Transition started from state');
            console.log(fromState);
            console.log('To state');
            console.log(toState);
        },
        onTransitionCancel: function onTransitionCancel() {
            console.warn('Transition cancelled');
        },
        onTransitionError: function onTransitionError(toState, fromState, err) {
            console.warn('Transition error with code ' + err.code);
            endGroup();
        },
        onTransitionSuccess: function onTransitionSuccess() {
            console.log('Transition success');
            endGroup();
        }
    };
}

loggerPlugin.pluginName = 'LOGGER_PLUGIN';

export default loggerPlugin;