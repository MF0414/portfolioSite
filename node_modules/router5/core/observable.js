'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = withObservablePlugin;

var _symbolObservable = require('symbol-observable');

var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function observerPlugin(router) {
    var listeners = [];

    function unsubscribe(listener) {
        if (listener) {
            listeners = listeners.filter(function (l) {
                return l !== listener;
            });
        }
    }

    function _subscribe(listener) {
        var isObject = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
        var finalListener = isObject ? listener.next.bind(listener) : listener;

        listeners = listeners.concat(finalListener);

        var unsubscribeHandler = function unsubscribeHandler() {
            return unsubscribe(finalListener);
        };

        return isObject ? { unsubscribe: unsubscribeHandler } : unsubscribeHandler;
    }

    function observable() {
        return _defineProperty({
            subscribe: function subscribe(observer) {
                if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object' || observer === null) {
                    throw new TypeError('Expected the observer to be an object.');
                }
                return _subscribe(observer);
            }
        }, _symbolObservable2.default, function () {
            return this;
        });
    }

    router.subscribe = _subscribe;
    router[_symbolObservable2.default] = observable;

    return {
        onTransitionSuccess: function onTransitionSuccess(toState, fromState) {
            listeners.forEach(function (listener) {
                return listener({
                    route: toState,
                    previousRoute: fromState
                });
            });
        }
    };
}

observerPlugin.pluginName = 'OBSERVABLE_PLUGIN';

function withObservablePlugin(router) {
    router.usePlugin(observerPlugin);
}