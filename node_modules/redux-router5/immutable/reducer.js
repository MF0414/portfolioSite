'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _actionTypes = require('../lib/actionTypes');

var actionTypes = _interopRequireWildcard(_actionTypes);

var _immutable = require('immutable');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// eslint-disable-next-line new-cap
var State = (0, _immutable.Record)({
    route: null,
    previousRoute: null,
    transitionRoute: null,
    transitionError: null
});

function router5Reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new State();
    var action = arguments[1];

    switch (action.type) {
        case actionTypes.TRANSITION_START:
            return state.set('transitionRoute', action.payload.route).set('transitionError', null);

        case actionTypes.TRANSITION_SUCCESS:
            return state.set('transitionRoute', null).set('transitionError', null).set('previousRoute', action.payload.previousRoute).set('route', action.payload.route);

        case actionTypes.TRANSITION_ERROR:
            return state.set('transitionRoute', action.payload.route).set('transitionError', action.payload.transitionError);

        case actionTypes.CLEAR_ERRORS:
            return state.set('transitionRoute', null).set('transitionError', null);

        default:
            return state;
    }
}

exports.default = router5Reducer;